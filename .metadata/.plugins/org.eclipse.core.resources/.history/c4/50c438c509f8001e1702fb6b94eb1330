package sae;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;


public class SolverWithBFS implements Solver {
	private Queue<Node> file = new LinkedList<>();
	private Queue<Node> soluceNode = new LinkedList<>();
	private List<Node> marquer;
	private HashMap predecesseur;
	private Node nodeA;
	private Node nodeB;
	private Node sommet;
	private int steps;
	
	
	public SolverWithBFS(Node nodeA, Node nodeB) {
		this.nodeA=nodeA;
		this.nodeB=nodeB;
		marquer.add(nodeA);
		file.offer(nodeA); 
		steps=0;
	}
	
	public void resolve() {
		while (!file.isEmpty()) {
			sommet = file.peek();
			for (Node voisin : sommet.neighboors()) {
				if (!marquer.contains(voisin)) {
					predecesseur.put(voisin,sommet);
					if(voisin.equals(nodeB)) {
						return;
					}
					marquer.add(voisin);
					file.offer(voisin);
				}
				
			}
		}
	}

	@Override
	public GraphSoluce getSoluce(Node valeur) {
	    Node clef = getKeyByValue(predecesseur, valeur);
	    return null;
	}
	
	private Node getKeyByValue(HashMap<Node, Node> map, Node value) {
	    for (Map.Entry<Node, Node> entry : map.entrySet()) {
	        if (value.equals(entry.getValue())) {
	            return entry.getKey();
	        }
	    }
	    return null;
	}

	@Override
	public int getSteps() {
		return steps;
	}
}
